<?php

/**
 * @file
 * Provides functionality for the Commerce Amazon MWS Order module.
 */

use Drupal\commerce_amws\Entity\StoreInterface as AmwsStoreInterface;
use Drupal\commerce_amws_order\Adapters\CpigroupPhpAmazonMws\OrderStorage as AmwsOrderStorage;

/**
 * Constants.
 */

/**
 * The name of the logger channel to use throughout this module.
 *
 * @I Use the logger service everywhere and remove channel name constant
 *    type     : task
 *    priority : low
 *    labels   : coding-standards
 */
const COMMERCE_AMWS_ORDER_LOGGER_CHANNEL = 'commerce_amws_order';

/**
 * Hooks.
 */

/**
 * Implements hook_cron().
 */
function commerce_amws_order_cron() {
  commerce_amws_order_cron__import();
  commerce_amws_order_cron__purge();
}

/**
 * Callbacks.
 */

/**
 * Stub implementation of hook_cron() for importing orders.
 *
 * @I Move to a hook service
 *    type     : task
 *    priority : low
 *    labels   : coding-standards
 */
function commerce_amws_order_cron__import() {
  $config = \Drupal::service('config.factory')->get('commerce_amws_order.settings');
  if (!$config->get('cron.status')) {
    return;
  }

  $amws_store_storage = \Drupal::service('entity_type.manager')->getStorage('commerce_amws_store');
  $order_storage = \Drupal::service('entity_type.manager')->getStorage('commerce_order');
  $amws_order_service = \Drupal::service('commerce_amws_order.order_service');
  $logger = \Drupal::service('logger.factory')->get(COMMERCE_AMWS_ORDER_LOGGER_CHANNEL);

  $amws_store_ids = $amws_store_storage
    ->getQuery()
    ->condition('status', AmwsStoreInterface::STATUS_PUBLISHED)
    ->execute();

  if (!$amws_store_ids) {
    return;
  }

  $limit = $config->get('cron.limit');

  $amws_stores = $amws_store_storage->loadMultiple($amws_store_ids);
  foreach ($amws_stores as $amws_store) {
    $amws_order_storage = new AmwsOrderStorage(
      $amws_store,
      $order_storage,
      $amws_order_service,
      $logger
    );

    $options = [];
    if ($limit) {
      $options['post_filters']['limit'] = $limit;
    }

    $amws_order_storage->import($options);
    unset($amws_order_storage);
  }
}

/**
 * Stub implementation of hook_cron() for purging orders.
 */
function commerce_amws_order_cron__purge() {
  $config = \Drupal::service('config.factory')->get('commerce_amws_order.settings');
  if (!$config->get('purge.cron.status')) {
    return;
  }

  $options = [
    'interval' => (int) $config->get('purge.interval'),
    'limit' => (int) $config->get('purge.cron.limit'),
  ];
  \Drupal::service('commerce_amws_order.order_purger')->purge($options, FALSE);
}
