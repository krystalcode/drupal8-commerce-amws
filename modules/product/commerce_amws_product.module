<?php

/**
 * @file
 * Provides functionality for the Commerce Amazon MWS Product module.
 */

use Drupal\commerce_amws\Entity\StoreInterface as AmwsStoreInterface;
use Drupal\commerce_amws_product\Adapters\Mcs\ProductStorage as AmwsProductRemoteStorage;
use Drupal\commerce_amws_product\Entity\ProductTypeInterface as AmwsProductTypeInterface;
use Drupal\commerce_product\Entity\ProductTypeInterface;
use Drupal\entity\BundleFieldDefinition;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Constants.
 */

/**
 * The name of the logger channel to use throughout this module.
 */
const COMMERCE_AMWS_PRODUCT_LOGGER_CHANNEL = 'commerce_amws_product';

/**
 * The prefix for form elements representing field mapping items.
 */
const COMMERCE_AMWS_PRODUCT_FIELD_MAPPING_FORM_ELEMENT_PREFIX = 'commerce_amws_product_field_mapping_';

/**
 * Hooks.
 */

/**
 * Implements hook_cron().
 *
 * Submits queued Amazon MWS products for synchronization.
 */
function commerce_amws_product_cron() {
  $config = \Drupal::service('config.factory')->get('commerce_amws_product.settings');
  if (!$config->get('cron.status')) {
    return;
  }

  $amws_store_storage = \Drupal::service('entity_type.manager')->getStorage('commerce_amws_store');
  $amws_product_storage = \Drupal::service('entity_type.manager')->getStorage('commerce_amws_product');
  $logger = \Drupal::service('logger.factory')->get(COMMERCE_AMWS_PRODUCT_LOGGER_CHANNEL);

  // Load enabled stores, limited in number by the related configuration
  // setting.
  $store_limit = $config->get('cron.store_limit');
  $query = $amws_store_storage
    ->getQuery()
    ->accessCheck(FALSE)
    ->condition('status', AmwsStoreInterface::STATUS_PUBLISHED);

  if ($store_limit) {
    $query->range(0, $store_limit);
  }

  $amws_store_ids = $query->execute();

  if (!$amws_store_ids) {
    return;
  }

  // Load and export Amazon MWS products per store, limited in number by the
  // related configuration setting.
  $product_limit = $config->get('cron.product_limit');
  $amws_stores = $amws_store_storage->loadMultiple($amws_store_ids);
  foreach ($amws_stores as $amws_store) {
    $load_options = ['store_id' => $amws_store->id()];
    if ($product_limit) {
      $load_options['limit'] = $product_limit;
    }
    $amws_products = $amws_product_storage->loadQueued($load_options, FALSE);

    if (!$amws_products) {
      continue;
    }

    $amws_product_remote_storage = new AmwsProductRemoteStorage();
    $amws_product_remote_storage->export($amws_products);
    unset($amws_product_remote_storage);
  }
}

/**
 * Implements hook_entity_update().
 */
function commerce_amws_product_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'commerce_product') {
    return;
  }

  $change = \Drupal::service('config.factory')
    ->get('commerce_amws_product.settings')
    ->get('workflow.change_on_commerce_product_change');
  if (!$change) {
    return;
  }

  $amws_product_storage = \Drupal::service('entity_type.manager')
    ->getStorage('commerce_amws_product');
  $amws_product_ids = $amws_product_storage
    ->getQuery()
    ->accessCheck(FALSE)
    ->condition('product_id', $entity->id())
    ->execute();

  if (!$amws_product_ids) {
    return;
  }

  $transition_id = 'change';
  $amws_products = $amws_product_storage->loadMultiple($amws_product_ids);
  foreach ($amws_products as $amws_product) {
    $state = $amws_product->getState();
    $workflow = $state->getWorkflow();
    $transition = $workflow->getTransition($transition_id);
    $transitions = $workflow->getAllowedTransitions($state, $amws_product);

    if (!in_array($transition_id, array_keys($transitions))) {
      continue;
    }

    $state->applyTransition($transition);
    $amws_product->save();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds Amazon MWS integration settings per product type.
 */
function commerce_amws_form_commerce_product_type_edit_form_alter(
  &$form,
  FormStateInterface $form_state
) {
  $product_type = $form_state->getFormObject()->getEntity();

  $form['commerce_amws_product'] = [
    '#type' => 'details',
    '#title' => 'Amazon MWS integration settings',
    '#open' => TRUE,
    '#weight' => 1,
  ];

  // Amazon MWS integration status.
  _commerce_amws_form_commerce_product_type_edit_form_alter__status(
    $form,
    $form_state,
    $product_type
  );

  // Amazon MWS product type.
  _commerce_amws_form_commerce_product_type_edit_form_alter__amws_product_type(
    $form,
    $form_state,
    $product_type
  );

  // Amazon MWS field mappings.
  _commerce_amws_form_commerce_product_type_edit_form_alter__field_mapping(
    $form,
    $form_state,
    $product_type
  );

  // Entity builder callback for setting third party settings.
  $form['#entity_builders'][] = '_commerce_amws_product_form_commerce_product_type_edit_form_builder';

  // Let's display these settings before language settings.
  $form['language']['#weight'] = 2;
}

/**
 * Adds status form element to product type form.
 *
 * Only products of types that have status enabled will be synchronized with
 * Amazon MWS.
 *
 * @param array $form
 *   The complete form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type being edited.
 */
function _commerce_amws_form_commerce_product_type_edit_form_alter__status(
  array &$form,
  FormStateInterface $form_state,
  ProductTypeInterface $product_type
) {
  $default_value = $product_type->getThirdPartySetting(
    'commerce_amws_product',
    'status'
  );
  $form['commerce_amws_product']['commerce_amws_product_status'] = [
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#description' => t('Whether to enable Amazon MWS integration for products of this type.'),
    '#default_value' => $default_value,
  ];
}

/**
 * Adds Amazon MWS product type ID form element to product type form.
 *
 * Each Commerce product type is associated with an Amazon MWS product type
 * which will be used for creating Amazon MWS products corresponding to Commerce
 * products.
 *
 * @param array $form
 *   The complete form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type being edited.
 */
function _commerce_amws_form_commerce_product_type_edit_form_alter__amws_product_type(
  array &$form,
  FormStateInterface $form_state,
  ProductTypeInterface $product_type
) {
  $default_value = $product_type->getThirdPartySetting(
    'commerce_amws_product',
    'product_type_id'
  );

  $amws_product_types = \Drupal::entityTypeManager()
    ->getStorage('commerce_amws_product_type')
    ->loadMultiple();
  $options = [];
  foreach ($amws_product_types as $type) {
    $options[$type->id()] = $type->label();
  }

  $form['commerce_amws_product']['commerce_amws_product_product_type_id'] = [
    '#type' => 'radios',
    '#title' => t('Amazon MWS product type'),
    '#description' => t('The Amazon MWS product type that will be used for products of this type.'),
    '#options' => $options,
    '#default_value' => $default_value,
    '#states' => [
      'visible' => [
        ':input[name="commerce_amws_product_status"]' => ['checked' => TRUE],
      ],
    ],
  ];
}

/**
 * Adds field mapping form elements to product type form.
 *
 * @param array $form
 *   The complete form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type being edited.
 */
function _commerce_amws_form_commerce_product_type_edit_form_alter__field_mapping(
  array &$form,
  FormStateInterface $form_state,
  ProductTypeInterface $product_type
) {
  // Form element containers.
  $form['commerce_amws_product']['field_mapping'] = [
    '#type' => 'details',
    '#title' => t('Field mapping'),
    '#description' => t('By configuring field mapping you can define which field, belonging to the Commerce product entity being synced, to use as the value for the corresponding field supported by Amazon MWS API. If the corresponding Amazon MWS product entity has a value for the corresponding field, it will take precedence over the Commerce product entity field value.'),
    '#states' => [
      'visible' => [
        ':input[name="commerce_amws_product_status"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['commerce_amws_product']['field_mapping']['description_data'] = [
    '#type' => 'fieldset',
    '#title' => t('Description data'),
    '#weight' => 100,
  ];

  // Load current field mapping configuration and format it as a
  // single-dimensional associative array so that it can more easily be used
  // later on.
  $current_field_mapping = $product_type->getThirdPartySetting(
    'commerce_amws_product',
    'field_mapping'
  );
  $current_field_mapping = array_reduce(
    $current_field_mapping ? $current_field_mapping : [],
    function ($carry, $item) {
      $carry[$item['commerce_amws_product_field']] = $item['commerce_product_field'];
      return $carry;
    },
    []
  );

  // Load fields available on `commerce_product` entities of the type we are
  // currently editing.
  $product_type_field_definitions = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions(
      'commerce_product',
      $product_type->id()
    );

  // Add a form element for each Amazon MWS field.
  $field_definitions = \Drupal::service('commerce_amws_product.field_mapping')
    ->bundleFieldDefinitions();
  foreach ($field_definitions as $field_name => $field_definition) {
    _commerce_amws_form_commerce_product_type_edit_form_alter__field_mapping_item(
      $form,
      $form_state,
      $field_name,
      $field_definition,
      $current_field_mapping,
      $product_type_field_definitions
    );
  }
}

/**
 * Adds individual field mapping form element to product type form.
 *
 * @param array $form
 *   The complete form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param string $field_name
 *   The name of the Amazon MWS field being processed.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 *   The definition of the Amazon MWS field being processed.
 * @param array $current_field_mapping
 *   An associative array keyed by the names of the Amazon MWS fields with the
 *   corresponding Commerce Product fields provided by the current configuration
 *   as its values.
 */
function _commerce_amws_form_commerce_product_type_edit_form_alter__field_mapping_item(
  array &$form,
  FormStateInterface $form_state,
  $field_name,
  FieldDefinitionInterface $field_definition,
  array $current_field_mapping,
  array $product_type_field_definitions
) {
  // Prepare default value.
  $default_value = NULL;
  if (!empty($current_field_mapping[$field_name])) {
    $default_value = $current_field_mapping[$field_name];
  }
  // Prepare field options.
  $options = _commerce_amws_product_field_mapping_prepare_options(
    $product_type_field_definitions,
    $field_definition->getType()
  );

  // Build the form element. Display a message if there are no candidate
  // fields available for the product type.
  if ($options) {
    array_unshift($options, t('Select a field'));
    $element = [
      '#type' => 'select',
      '#title' => $field_definition->getLabel(),
      '#description' => $field_definition->getDescription(),
      '#options' => $options,
      '#default_value' => $default_value,
    ];
  }
  else {
    $element = [
      '#markup' => '<br /><strong>' . $field_definition->getLabel() . '</strong><br /><div>' . t('There is no field for this product type that could be matched to this Amazon MWS field.') . '</div>',
    ];
  }

  // If the field is a description data field, add it to the corresponding
  // sub-container.
  $element_name = COMMERCE_AMWS_PRODUCT_FIELD_MAPPING_FORM_ELEMENT_PREFIX . $field_name;
  if (strpos($field_name, 'amws_dd_') === 0) {
    $form['commerce_amws_product']['field_mapping']['description_data'][$element_name] = $element;
  }
  else {
    $form['commerce_amws_product']['field_mapping'][$element_name] = $element;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds Amazon MWS product details to commerce product edit form.
 */
function commerce_amws_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  $is_product_form = strpos($form_id, 'commerce_product_') === 0;
  $is_edit_form = strpos($form_id, '_edit_form');
  if (!$is_product_form || !$is_edit_form) {
    return;
  }

  // Exclude product (variation) type edit forms.
  $type_forms = [
    'commerce_product_type_edit_form',
    'commerce_product_variation_type_edit_form',
  ];
  if (in_array($form_id, $type_forms)) {
    return;
  }

  $product = $form_state->getFormObject()->getEntity();

  // We have filtered forms by their IDs, but it's not completely reliable as
  // there might be other forms apart from product type and product variation
  // type edit forms that follow the pattern. Let's at least make sure that we
  // have a Commerce product entity.
  if ($product->getEntityTypeId() !== 'commerce_product') {
    return;
  }

  $form['commerce_amws_product'] = [
    '#type' => 'details',
    '#title' => t('Amazon MWS integration'),
    '#open' => FALSE,
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['product-amazon-mws-settings'],
    ],
    '#weight' => 120,
  ];

  $product_type_id = $product->bundle();
  $product_type = \Drupal::entityTypeManager()
    ->getStorage('commerce_product_type')
    ->load($product_type_id);

  // The type of the product needs to have integration enabled.
  $amws_status = $product_type->getThirdPartySetting(
    'commerce_amws_product',
    'status'
  );
  if (!$amws_status) {
    $form['commerce_amws_product']['status'] = [
      '#markup' => '<p>' . t('Products of this type are not configured to be synchronized with Amazon MWS.') . '</p>',
    ];
    return;
  }

  // Customize the message depending on whether there is already an AMWS product
  // for the product at hand.
  $amws_product_id = \Drupal::entityTypeManager()
    ->getStorage('commerce_amws_product')
    ->getQuery()
    ->accessCheck(FALSE)
    ->condition('product_id', $product->id())
    ->range(0, 1)
    ->execute();
  if ($amws_product_id) {
    $amws_product_id = current($amws_product_id);
  }

  if ($amws_product_id) {
    $form['commerce_amws_product']['status'] = [
      '#markup' => '<p>' . t('This product is set to be synchronized with Amazon MWS.') . '</p>',
    ];
  }
  else {
    $form['commerce_amws_product']['status'] = [
      '#markup' => '<p>' . t('This product is not currently set to be synchronized with Amazon MWS.') . '</p>',
    ];
  }

  // Add the link to add/edit the corresponding AMWS product form. For now, we
  // provide UI for maintaining only one AMWS product per product.
  if ($amws_product_id) {
    $url = Url::fromRoute(
      'entity.commerce_amws_product.edit_form',
      [
        'commerce_amws_product' => $amws_product_id,
      ]
    );
  }
  else {
    $amws_product_type_id = $product_type->getThirdPartySetting(
      'commerce_amws_product',
      'product_type_id'
    );
    $url = Url::fromRoute(
      'entity.commerce_amws_product.add_form',
      ['commerce_amws_product_type' => $amws_product_type_id],
      ['query' => ['commerce-product' => $product->id()]]
    );
  }
  $form['commerce_amws_product']['product_id'] = [
    '#type' => 'link',
    '#title' => t('Configure'),
    '#url' => $url,
  ];
}

/**
 * Callbacks.
 */

/**
 * Entity builder callback for the `commerce_product_type` configuration entity.
 *
 * @param string $entity_type
 *   The type of the entity being built.
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The entity being built.
 * @param array $form
 *   The complete form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _commerce_amws_product_form_commerce_product_type_edit_form_builder(
  $entity_type,
  ProductTypeInterface $product_type,
  array &$form,
  FormStateInterface $form_state
) {
  // Add enabled status.
  $status = $form_state->getValue('commerce_amws_product_status');
  $product_type->setThirdPartySetting(
    'commerce_amws_product',
    'status',
    $status ? TRUE : FALSE
  );

  // Add product type, but only if status is enabled. Do not make any changes if
  // status is set to disabled. This way when the status is enabled again the
  // previous product type will be the default.
  $product_type_id = $form_state->getValue('commerce_amws_product_product_type_id');
  if ($status) {
    $product_type->setThirdPartySetting(
      'commerce_amws_product',
      'product_type_id',
      $product_type_id
    );
  }

  // Field mapping configuration.
  _commerce_amws_product_form_commerce_product_type_edit_form_builder__field_mapping(
    $entity_type,
    $product_type,
    $form,
    $form_state,
    $status
  );
}

/**
 * Handles field mapping properties for `commerce_product_type` entity builder.
 *
 * @param string $entity_type
 *   The type of the entity being built.
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The entity being built.
 * @param array $form
 *   The complete form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param bool $status
 *   The status of the Amazon MWS integration with the product type being built.
 */
function _commerce_amws_product_form_commerce_product_type_edit_form_builder__field_mapping(
  $entity_type,
  ProductTypeInterface $product_type,
  array &$form,
  FormStateInterface $form_state,
  $status
) {
  // If the status is disabled don't save any changes. Don't nullify any
  // existing values either so that when integration is enabled again the
  // previous field mapping configuration will be the default.
  if (!$status) {
    return;
  }

  // Set the submitted field mapping values. They are identified by the
  // corresponding prefix.
  $field_mapping = [];
  $values = $form_state->getValues();
  foreach ($values as $key => $value) {
    if (strpos($key, COMMERCE_AMWS_PRODUCT_FIELD_MAPPING_FORM_ELEMENT_PREFIX) !== 0) {
      continue;
    }

    $amws_field_name = str_replace(
      COMMERCE_AMWS_PRODUCT_FIELD_MAPPING_FORM_ELEMENT_PREFIX,
      '',
      $key
    );
    $field_mapping[] = [
      'commerce_amws_product_field' => $amws_field_name,
      'commerce_product_field' => $value ? $value : NULL,
    ];
  }

  $product_type->setThirdPartySetting(
    'commerce_amws_product',
    'field_mapping',
    $field_mapping
  );
}

/**
 * Internal API.
 */

/**
 * Prepares the select options for a field mapping item form element.
 *
 * @param \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions
 *   The field definitions provided by the product type being edited.
 * @param string $field_type
 *   The Amazon MWS field type being mapped.
 */
function _commerce_amws_product_field_mapping_prepare_options(
  array $field_definitions,
  $field_type
) {
  // Filter out fields that are not of the given type.
  $options = array_filter(
    $field_definitions,
    function ($field) use ($field_type) {
      $synonyms = _commerce_amws_product_field_mapping_type_synonyms($field_type);
      if ($synonyms) {
        return in_array($field->getType(), $synonyms);
      }

      return $field_type === $field->getType();
    }
  );
  // Prepare the value that will be rendered as the title of the form element.
  $options = array_map(
    function ($field) {
      return $field->getLabel() . ' (' . $field->getName() . ')';
    },
    $options
  );

  return $options;
}

/**
 * Provides an array of field types that can be mapped to the given one.
 *
 * Some field types may be able to support storing, and therefore mapping,
 * values from other related field types. For example, the `created` field type
 * is simply an enhanced version of the `timestamp` field type and its value can
 * be mapped to a field of type `timestamp`.
 *
 * @param string $field_type
 *   The field type to get the "mappable" field types for.
 */
function _commerce_amws_product_field_mapping_type_synonyms($field_type) {
  $synonyms = [
    'timestamp' => [
      'created',
      'changed',
      'timestamp',
    ],
    'text_long' => [
      'text_long',
      'text_with_summary',
    ],
    'decimal' => [
      'decimal',
      'float',
      'integer',
    ],
  ];

  if (isset($synonyms[$field_type])) {
    return $synonyms[$field_type];
  }

  return FALSE;
}
